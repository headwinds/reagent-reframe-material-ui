["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$console","~$re-frame.loggers"],"~:excludes",["~#set",[]],"~:name","~$re-frame.cofx","~:imports",null,"~:requires",["^ ","~$re-frame.db","^=","~$re-frame.interceptor","^>","~$re-frame.registrar","^?","^6","^6"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^6","~$app-db","^=","~$->interceptor","^>","~$get-handler","^?","~$clear-handlers","^?","~$register-handler","^?"],"~:defs",["^ ","~$kind",["^ ","^9","~$re-frame.cofx/kind","~:file","resources/public/js/out/re_frame/cofx.cljc","~:line",11,"~:column",1,"~:end-line",11,"~:end-column",10,"~:meta",["^ ","^J","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/cofx.cljc","^K",11,"^L",6,"^M",11,"^N",10],"~:tag","~$cljs.core/Keyword"],"~$register",["^ ","^9","~$re-frame.cofx/register","^J","resources/public/js/out/re_frame/cofx.cljc","^K",13,"^L",1,"^M",13,"^N",14,"^O",["^ ","^J","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/cofx.cljc","^K",13,"^L",6,"^M",13,"^N",14],"^P","~$any"],"~$inject-cofx",["^ ","~:protocol-inline",null,"^O",["^ ","^J","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/cofx.cljc","^K",18,"^L",7,"^M",18,"^N",18,"~:arglists",["~#list",["~$quote",["^X",[["~$id"],["^Z","~$value"]]]]],"~:doc","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   ","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^X",[["^Z"],["^Z","^["]]],"^W",["^X",[["^Z"],["^Z","^["]]],"~:arglists-meta",["^X",[null,null]]]],"^9","~$re-frame.cofx/inject-cofx","^12",false,"^J","resources/public/js/out/re_frame/cofx.cljc","^N",18,"^11",["^ ","^12",false,"^13",2,"^14",["^X",[["^Z"],["^Z","^["]]],"^W",["^X",[["^Z"],["^Z","^["]]],"^15",["^X",[null,null]]],"^14",["^X",[["^Z"],["^Z","^["]]],"~:protocol-impl",null,"^15",["^X",[null,null]],"^L",1,"^K",18,"^M",18,"^13",2,"~:fn-var",true,"^W",["^X",[["^Z"],["^Z","^["]]],"^10","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   "],"~$inject-db",["^ ","^9","~$re-frame.cofx/inject-db","^J","resources/public/js/out/re_frame/cofx.cljc","^K",66,"^L",1,"^M",66,"^N",15,"^O",["^ ","^J","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/cofx.cljc","^K",66,"^L",6,"^M",66,"^N",15],"^P","^T"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:db","~:id","~:coeffects","~:cofx","~:before"]],"~:order",["^1B","^1@","^1A","^1C","^1?"]],"^10",null]