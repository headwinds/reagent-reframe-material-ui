["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$reagent-id","~$re-frame.interop","~$console","~$re-frame.loggers","~$dispose!","^6","~$add-on-dispose!","^6","~$make-reaction","^6","~$deref?","^6","~$ratom?","^6","~$debug-enabled?","^6"],"~:excludes",["~#set",[]],"~:name","~$re-frame.subs","~:imports",null,"~:requires",["^ ","~$re-frame.db","^E","^6","^6","^8","^8","~$re-frame.utils","^F","~$re-frame.registrar","^G","~$trace","~$re-frame.trace","^I","^I"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^6","^7","^8","~$app-db","^E","^9","^6","^:","^6","^;","^6","~$get-handler","^G","~$first-in-vector","^F","^<","^6","^=","^6","^>","^6","~$clear-handlers","^G","~$register-handler","^G"],"~:defs",["^ ","~$cache-and-return",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","~:line",44,"~:column",7,"~:end-line",44,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^[",[["~$query-v","~$dynv","~$r"]]]]],"~:doc","cache the reaction r"],"^A","~$re-frame.subs/cache-and-return","~:variadic",false,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",23,"~:method-params",["^[",[["^11","^12","~$r"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^W",1,"^V",44,"^X",44,"~:max-fixed-arity",3,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11","^12","~$r"]]]]],"^13","cache the reaction r"],"~$deref-input-signals",["^ ","^S",null,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",126,"^W",8,"^X",126,"^Y",27,"~:private",true,"^Z",["^[",["^10",["^[",[["~$signals","~$query-id"]]]]]],"^1<",true,"^A","~$re-frame.subs/deref-input-signals","^15",false,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",27,"^16",["^[",[["^1=","^1>"]]],"^17",null,"^18",["^[",[null,null]],"^W",1,"^V",126,"^X",126,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["^1=","^1>"]]]]]],"~$subscribe",["^ ","^S",null,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",69,"^W",7,"^X",69,"^Y",16,"^Z",["^[",["^10",["^[",[["^11"],["~$v","^12"]]]]],"^13","Returns a Reagent/reaction which contains a computation","~:top-fn",["^ ","^15",false,"^19",2,"^16",["^[",[["^11"],["~$v","^12"]]],"^Z",["^[",[["^11"],["~$v","^12"]]],"^18",["^[",[null,null]]]],"^A","~$re-frame.subs/subscribe","^15",false,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",16,"^1A",["^ ","^15",false,"^19",2,"^16",["^[",[["^11"],["~$v","^12"]]],"^Z",["^[",[["^11"],["~$v","^12"]]],"^18",["^[",[null,null]]],"^16",["^[",[["^11"],["~$v","^12"]]],"^17",null,"^18",["^[",[null,null]],"^W",1,"^V",69,"^X",69,"^19",2,"^1:",true,"^Z",["^[",[["^11"],["~$v","^12"]]],"^13","Returns a Reagent/reaction which contains a computation"],"~$reg-sub",["^ ","^S",null,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",137,"^W",7,"^X",137,"^Y",14,"^Z",["^[",["^10",["^[",[["^1>","~$&","~$args"]]]]],"^13","Associate the given `query id` with a handler function and an optional signal function.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation function, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  ","^1A",["^ ","^15",true,"^19",1,"^16",[["^[",["^1>","^1D"]]],"^Z",["^[",[["^1>","~$&","^1D"]]],"^18",["^[",[null]]]],"^A","~$re-frame.subs/reg-sub","^15",true,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",14,"^1A",["^ ","^15",true,"^19",1,"^16",[["^[",["^1>","^1D"]]],"^Z",["^[",[["^1>","~$&","^1D"]]],"^18",["^[",[null]]],"^16",[["^[",["^1>","^1D"]]],"^17",null,"^18",["^[",[null]],"^W",1,"^V",137,"^X",137,"^19",1,"^1:",true,"^Z",["^[",[["^1>","~$&","^1D"]]],"^13","Associate the given `query id` with a handler function and an optional signal function.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation function, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  "],"~$query->reaction",["^ ","^A","~$re-frame.subs/query->reaction","^U","resources/public/js/out/re_frame/subs.cljc","^V",18,"^W",1,"^X",18,"^Y",21,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",18,"^W",6,"^X",18,"^Y",21],"~:tag","~$any"],"~$clear-all-handlers!",["^ ","^S",null,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",38,"^W",7,"^X",38,"^Y",26,"^Z",["^[",["^10",["^[",[[]]]]],"^13","Unregisters all existing subscription handlers"],"^A","~$re-frame.subs/clear-all-handlers!","^15",false,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",26,"^16",["^[",[[]]],"^17",null,"^18",["^[",[null,null]],"^W",1,"^V",38,"^X",38,"^19",0,"^1:",true,"^Z",["^[",["^10",["^[",[[]]]]],"^13","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^S",null,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",60,"^W",7,"^X",60,"^Y",19,"^Z",["^[",["^10",["^[",[["^11"],["^11","~$dyn-v"]]]]],"^1A",["^ ","^15",false,"^19",2,"^16",["^[",[["^11"],["^11","^1M"]]],"^Z",["^[",[["^11"],["^11","^1M"]]],"^18",["^[",[null,null]]]],"^A","~$re-frame.subs/cache-lookup","^15",false,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",19,"^1A",["^ ","^15",false,"^19",2,"^16",["^[",[["^11"],["^11","^1M"]]],"^Z",["^[",[["^11"],["^11","^1M"]]],"^18",["^[",[null,null]]],"^16",["^[",[["^11"],["^11","^1M"]]],"^17",null,"^18",["^[",[null,null]],"^W",1,"^V",60,"^X",60,"^19",2,"^1:",true,"^Z",["^[",[["^11"],["^11","^1M"]]]],"~$map-vals",["^ ","^S",null,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",117,"^W",8,"^X",117,"^Y",16,"^1<",true,"^Z",["^[",["^10",["^[",[["~$f","~$m"]]]]],"^13","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^1<",true,"^A","~$re-frame.subs/map-vals","^15",false,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",16,"^16",["^[",[["~$f","~$m"]]],"^17",null,"^18",["^[",[null,null]],"^W",1,"^V",117,"^X",117,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["~$f","~$m"]]]]],"^13","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^A","~$re-frame.subs/kind","^U","resources/public/js/out/re_frame/subs.cljc","^V",10,"^W",1,"^X",10,"^Y",10,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",10,"^W",6,"^X",10,"^Y",10],"^1H","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^S",null,"^T",["^ ","^U","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/subs.cljc","^V",20,"^W",7,"^X",20,"^Y",32,"^Z",["^[",["^10",["^[",[[]]]]],"^13","Runs on-dispose for all subscriptions we have in the subscription cache.\n  Used to force recreation of new subscriptions. Should only be necessary\n  in development.\n\n  The on-dispose functions for the subscriptions will remove themselves from the\n  cache.\n\n  Useful when reloading Figwheel code after a React exception, as React components\n  aren't cleaned up properly. This means a subscription's on-dispose function isn't\n  run when the components are destroyed. If a bad subscription caused your exception,\n  then you can't fix it without reloading your browser."],"^A","~$re-frame.subs/clear-subscription-cache!","^15",false,"^U","resources/public/js/out/re_frame/subs.cljc","^Y",32,"^16",["^[",[[]]],"^17",null,"^18",["^[",[null,null]],"^W",1,"^V",20,"^X",20,"^19",0,"^1:",true,"^Z",["^[",["^10",["^[",[[]]]]],"^13","Runs on-dispose for all subscriptions we have in the subscription cache.\n  Used to force recreation of new subscriptions. Should only be necessary\n  in development.\n\n  The on-dispose functions for the subscriptions will remove themselves from the\n  cache.\n\n  Useful when reloading Figwheel code after a React exception, as React components\n  aren't cleaned up properly. This means a subscription's on-dispose function isn't\n  run when the components are destroyed. If a bad subscription caused your exception,\n  then you can't fix it without reloading your browser."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^H","^I","^I","^I"],"~:cljs.analyzer/constants",["^ ","~:seen",["^@",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^23","^25","^26","^2@","^1[","^2;","^29","^2?","^27","^2<","^21","^28","^2>","^24","^2:","^1Z","^2=","^22","^20"]],"^13",null]