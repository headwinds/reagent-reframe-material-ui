["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^;","~$re-frame.interop","^<"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$console","^;","~$ratom?","^<","~$empty-queue","^<","~$debug-enabled?","^<"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","~:line",70,"~:column",8,"~:end-line",70,"~:end-column",27,"~:private",true,"~:arglists",["~#list",["~$quote",["^N",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^L",true,"^7","~$re-frame.interceptor/invoke-interceptors","~:variadic",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",27,"~:method-params",["^N",[["^P","^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^I",1,"^H",70,"^J",70,"~:max-fixed-arity",2,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P","^Q"]]]]],"^R","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",52,"^I",7,"^J",52,"^K",21,"^M",["^N",["^O",["^N",[["^P","~$key","~$value"]]]]]],"^7","~$re-frame.interceptor/assoc-coeffect","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",21,"^U",["^N",[["^P","^[","^10"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",52,"^J",52,"^X",3,"^Y",true,"^M",["^N",["^O",["^N",[["^P","^[","^10"]]]]]],"~$update-coeffect",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",56,"^I",7,"^J",56,"^K",22,"^M",["^N",["^O",["^N",[["^P","^[","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^T",true,"^X",3,"^U",[["^N",["^P","^[","~$f","^13"]]],"^M",["^N",[["^P","^[","~$f","~$&","^13"]]],"^W",["^N",[null]]]],"^7","~$re-frame.interceptor/update-coeffect","^T",true,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",22,"^14",["^ ","^T",true,"^X",3,"^U",[["^N",["^P","^[","~$f","^13"]]],"^M",["^N",[["^P","^[","~$f","~$&","^13"]]],"^W",["^N",[null]]],"^U",[["^N",["^P","^[","~$f","^13"]]],"^V",null,"^W",["^N",[null]],"^I",1,"^H",56,"^J",56,"^X",3,"^Y",true,"^M",["^N",[["^P","^[","~$f","~$&","^13"]]]],"~$invoke-interceptor-fn",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",63,"^I",8,"^J",63,"^K",29,"^L",true,"^M",["^N",["^O",["^N",[["^P","~$interceptor","^Q"]]]]]],"^L",true,"^7","~$re-frame.interceptor/invoke-interceptor-fn","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",29,"^U",["^N",[["^P","^17","^Q"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",63,"^J",63,"^X",3,"^Y",true,"^M",["^N",["^O",["^N",[["^P","^17","^Q"]]]]]],"~$get-effect",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",29,"^I",7,"^J",29,"^K",17,"^M",["^N",["^O",["^N",[["^P"],["^P","^["],["^P","^[","~$not-found"]]]]],"^14",["^ ","^T",false,"^X",3,"^U",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^M",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^W",["^N",[null,null,null]]]],"^7","~$re-frame.interceptor/get-effect","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",17,"^14",["^ ","^T",false,"^X",3,"^U",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^M",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^W",["^N",[null,null,null]]],"^U",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^V",null,"^W",["^N",[null,null,null]],"^I",1,"^H",29,"^J",29,"^X",3,"^Y",true,"^M",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]]],"~$->interceptor",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",15,"^I",7,"^J",15,"^K",20,"^M",["^N",["^O",["^N",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^R","Create an interceptor from named arguments","^14",["^ ","^T",true,"^X",0,"^U",[["^N",[["^ ","^1=","~$m","^1>",["^1?","^1@","^1A"]]]]],"^M",["^N",[["~$&",["^ ","^1=","~$m","^1>",["^1?","^1@","^1A"]]]]],"^W",["^N",[null]]]],"^7","~$re-frame.interceptor/->interceptor","^T",true,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",20,"^14",["^ ","^T",true,"^X",0,"^U",[["^N",[["^ ","^1=","~$m","^1>",["^1?","^1@","^1A"]]]]],"^M",["^N",[["~$&",["^ ","^1=","~$m","^1>",["^1?","^1@","^1A"]]]]],"^W",["^N",[null]]],"^U",[["^N",[["^ ","^1=","~$m","^1>",["^1?","^1@","^1A"]]]]],"^V",null,"^W",["^N",[null]],"^I",1,"^H",15,"^J",15,"^X",0,"^Y",true,"^M",["^N",[["~$&",["^ ","^1=","~$m","^1>",["^1?","^1@","^1A"]]]]],"^R","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",44,"^I",7,"^J",44,"^K",19,"^M",["^N",["^O",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]]]],"^14",["^ ","^T",false,"^X",3,"^U",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^M",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^W",["^N",[null,null,null]]]],"^7","~$re-frame.interceptor/get-coeffect","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",19,"^14",["^ ","^T",false,"^X",3,"^U",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^M",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^W",["^N",[null,null,null]]],"^U",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]],"^V",null,"^W",["^N",[null,null,null]],"^I",1,"^H",44,"^J",44,"^X",3,"^Y",true,"^M",["^N",[["^P"],["^P","^["],["^P","^[","^1:"]]]],"~$execute",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",144,"^I",7,"^J",144,"^K",14,"^M",["^N",["^O",["^N",[["~$event-v","~$interceptors"]]]]],"^R","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^7","~$re-frame.interceptor/execute","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",14,"^U",["^N",[["^1F","^1G"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",144,"^J",144,"^X",2,"^Y",true,"^M",["^N",["^O",["^N",[["^1F","^1G"]]]]],"^R","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",38,"^I",7,"^J",38,"^K",19,"^M",["^N",["^O",["^N",[["^P","^[","^10"]]]]]],"^7","~$re-frame.interceptor/assoc-effect","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",19,"^U",["^N",[["^P","^[","^10"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",38,"^J",38,"^X",3,"^Y",true,"^M",["^N",["^O",["^N",[["^P","^[","^10"]]]]]],"~$enqueue",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",107,"^I",7,"^J",107,"^K",14,"^M",["^N",["^O",["^N",[["^P","^1G"]]]]],"^R","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^7","~$re-frame.interceptor/enqueue","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",14,"^U",["^N",[["^P","^1G"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",107,"^J",107,"^X",2,"^Y",true,"^M",["^N",["^O",["^N",[["^P","^1G"]]]]],"^R","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^7","~$re-frame.interceptor/mandatory-interceptor-keys","^G","resources/public/js/out/re_frame/interceptor.cljc","^H",7,"^I",1,"^J",7,"^K",32,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",7,"^I",6,"^J",7,"^K",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",9,"^I",7,"^J",9,"^K",19,"^M",["^N",["^O",["^N",[["~$m"]]]]]],"^7","~$re-frame.interceptor/interceptor?","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",19,"^U",["^N",[["~$m"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",9,"^J",9,"^X",1,"^Y",true,"^M",["^N",["^O",["^N",[["~$m"]]]]]],"~$change-direction",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",130,"^I",8,"^J",130,"^K",24,"^L",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^R","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^L",true,"^7","~$re-frame.interceptor/change-direction","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",24,"^U",["^N",[["^P"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",130,"^J",130,"^X",1,"^Y",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^R","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^P",["^ ","^E",null,"^F",["^ ","^G","/Users/brandonflowers/forks/reagent/examples/material-ui/resources/public/js/out/re_frame/interceptor.cljc","^H",119,"^I",8,"^J",119,"^K",15,"^L",true,"^M",["^N",["^O",["^N",[["~$event","^1G"],["^1U","^1G","~$db"]]]]],"^R","Create a fresh context","^14",["^ ","^T",false,"^X",3,"^U",["^N",[["^1U","^1G"],["^1U","^1G","^1V"]]],"^M",["^N",[["^1U","^1G"],["^1U","^1G","^1V"]]],"^W",["^N",[null,null]]]],"^L",true,"^7","~$re-frame.interceptor/context","^T",false,"^G","resources/public/js/out/re_frame/interceptor.cljc","^K",15,"^14",["^ ","^T",false,"^X",3,"^U",["^N",[["^1U","^1G"],["^1U","^1G","^1V"]]],"^M",["^N",[["^1U","^1G"],["^1U","^1G","^1V"]]],"^W",["^N",[null,null]]],"^U",["^N",[["^1U","^1G"],["^1U","^1G","^1V"]]],"^V",null,"^W",["^N",[null,null]],"^I",1,"^H",119,"^J",119,"^X",3,"^Y",true,"^M",["^N",[["^1U","^1G"],["^1U","^1G","^1V"]]],"^R","Create a fresh context"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:unnamed","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:before"]],"~:order",["^24","^25","^2:","^28","^20","^26","^29","^22","^27","^23","^21"]],"^R",null]